# This action uses the values stored in SECRETS, specifically. we store the following values
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# AWS_SESSION_TOKEN
# AWS_DEFAULT_REGION
#
# To connect to the CloudGuard API you either need the login/pwd or the token (see ReadMe file)
# CLOUDGUARD_LOGIN
# CLOUDGUARD_PWD
# CLOUDGUARD_TOKEN 
#
# The following values are necessary to send the report to the recipient
# MAIL_ADDRESS
# MAIL_PASSWORD
# MAIL_SERVER
# MAIL_USERNAME


name: Run Automated test Ubuntu

env:
      LICENSE_PLATE: ${{ secrets.MY_LICENSE_PLATE }}   
      
on:
    workflow_dispatch:
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
      
    - name: Add key
      run: |
           wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -

    - name: Set repo
      run: |
           echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list

    - name: Install AWS CLI tools
      run: |
           sudo apt-get update 
           sudo apt-get install awscli
           echo `aws --version`
           awsVERSION=${aws --version}
           
    - name: Run the test
      continue-on-error: true
      run: |
            echo $BASEURL
            cd functional-tests
            ./gradlew chromeHeadlessTest --tests="FirstTest"
        
    - name: Zip results folder
      run: |
            zip -r testResults.zip ./functional-tests/build/reports
    
    - name: Get the apt-get update
      run: |
            sudo apt-get update
    
    - name: install gpg
      run: |
            sudo apt-get -y install gpg

    - name: generate random pwd and save it as env variable
      run: |
            export ranPWD=$(echo $(gpg --gen-random --armor 1 8 | sed 's/[^[:alnum:]]//g')) 
            echo randomPWD=$(echo $ranPWD) >> $GITHUB_ENV

    - name: create combined pwd  and Encrypt README.md
      run: |
            echo fullPWD=${{ env.randomPWD }}-${{ secrets.MY_LICENSE_PLATE }}  >> $GITHUB_ENV

    - name: Encrypt README.md
      run: | 
            gpg -c --batch --passphrase ${{ env.fullPWD }} -o encryptFolder.gpg testResults.zip
    
    - name: Send email with encrypted results
      uses: dawidd6/action-send-mail@v3
      with:
          # Required mail server address:
          server_address: ${{secrets.MAIL_SERVER}}
          # Required mail server port:
          server_port: 465
          # Optional (recommended): mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: Encrypted test results for build job ${{github.repository}}
          # Required recipients' addresses:
          to:  ${{secrets.MAIL_ADDRESS}}
          # Required sender full name (address can be skipped):
          from: ${{secrets.MAIL_USERNAME}}
          # Optional plain body:

          body: Using AWS CLI version $(awsVersion)
      
                
          # Optional attachments:
          attachments: encryptFolder.gpg    




    - name: Send email with password
      uses: dawidd6/action-send-mail@v3
      with:
          # Required mail server address:
          server_address: ${{secrets.MAIL_SERVER}}
          # Required mail server port:
          server_port: 465
          # Optional (recommended): mail server username:
          username: ${{secrets.MAIL_USERNAME}}
          # Optional (recommended) mail server password:
          password: ${{secrets.MAIL_PASSWORD}}
          # Required mail subject:
          subject: Password
          # Required recipients' addresses:
          to:  ${{secrets.MAIL_ADDRESS}}
          # Required sender full name (address can be skipped):
          from: ${{secrets.MAIL_USERNAME}}
          # Optional plain body:

          body: Password to decrypt the file containing build job ${{github.repository}} test results 
      
                    **${{ env.randomPWD }}**
